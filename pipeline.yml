jobs:
  - name: set-self
    plan:
      - get: cf-hello-worlds
        trigger: true
      - set_pipeline: self
        file: cf-hello-worlds/pipeline.yml

  - name: deploy-python-flask
    serial_groups: [apps]
    plan:
      - in_parallel: &plan-gets
          - get: cf-hello-worlds
            trigger: true
            passed: [set-self]
          - get: timer
            trigger: true
      - task: update-dependencies
        file: cf-hello-worlds/python-flask/check-dependencies.yml
      - put: deploy-python-flask-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: &general-task
              aws_access_key_id: ((ecr_aws_key))
              aws_secret_access_key: ((ecr_aws_secret))
              repository: general-task
              aws_region: us-gov-west-1
              tag: latest
          path: cf-hello-worlds/python-flask
          manifest: cf-hello-worlds/python-flask/manifest.yml
      - put: deploy-python-flask-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/python-flask
          manifest: cf-hello-worlds/python-flask/manifest.yml
    on_failure:
      put: slack
      params: &slack-params
        text: |
          :x: Failed to deploy python-flask sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: ((slack-failure-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: deploy-ruby-sinatra
    serial_groups: [apps]
    plan:
      - in_parallel: *plan-gets
      - put: deploy-ruby-sinatra-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/ruby-sinatra
          manifest: cf-hello-worlds/ruby-sinatra/manifest.yml
      - put: deploy-ruby-sinatra-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/ruby-sinatra
          manifest: cf-hello-worlds/ruby-sinatra/manifest.yml
    on_failure:
      put: slack
      params:
        <<: *slack-params
        text: |
          :x: Failed to deploy ruby-sinatra sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-nodejs
    serial_groups: [apps]
    plan:
      - in_parallel: *plan-gets
      - put: deploy-nodejs-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/nodejs
          manifest: cf-hello-worlds/nodejs/manifest.yml
      - put: deploy-nodejs-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/nodejs
          manifest: cf-hello-worlds/nodejs/manifest.yml
    on_failure:
      put: slack
      params:
        <<: *slack-params
        text: |
          :x: Failed to deploy nodejs sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-nodejs-cnb
    serial_groups: [apps]
    plan:
      - in_parallel: *plan-gets
      - put: deploy-nodejs-cnb-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/nodejs
          manifest: cf-hello-worlds/nodejs/manifest-cnb.yml
      - put: deploy-nodejs-cnb-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/nodejs
          manifest: cf-hello-worlds/nodejs/manifest-cnb.yml
    on_failure:
      put: slack
      params:
        <<: *slack-params
        text: |
          :x: Failed to deploy nodejs CNB sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-php
    serial_groups: [apps]
    plan:
      - in_parallel: *plan-gets
      - put: deploy-php-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/php
          manifest: cf-hello-worlds/php/manifest.yml
      - put: deploy-php-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/php
          manifest: cf-hello-worlds/php/manifest.yml
    on_failure:
      put: slack
      params:
        <<: *slack-params
        text: |
          :x: Failed to deploy php sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-java
    serial_groups: [apps]
    plan:
      - in_parallel: *plan-gets
      - task: build
        file: cf-hello-worlds/java-see/build-java-see.yml
      - put: deploy-java-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds-build/java-see/target/hello-world-0.0.1-SNAPSHOT.jar
          manifest: cf-hello-worlds-build/java-see/manifest.yml
      - put: deploy-java-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds-build/java-see/target/hello-world-0.0.1-SNAPSHOT.jar
          manifest: cf-hello-worlds-build/java-see/manifest.yml
    on_failure:
      put: slack
      params:
        <<: *slack-params
        text: |
          :x: Failed to deploy java sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-dotnet-core
    serial_groups: [apps]
    plan:
      - in_parallel: *plan-gets
      - put: deploy-dotnet-core-staging
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/dotnet-core
          manifest: cf-hello-worlds/dotnet-core/manifest.yml
      - put: deploy-dotnet-core-production
        params:
          config:
            platform: linux
          image_resource:
            type: registry-image
            source: *general-task
          path: cf-hello-worlds/dotnet-core
          manifest: cf-hello-worlds/dotnet-core/manifest.yml
    on_failure:
      put: slack
      params:
        <<: *slack-params
        text: |
          :x: Failed to deploy dotnet-core sample app
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

resources:
  - name: cf-hello-worlds
    type: git
    source:
      uri: https://github.com/cloud-gov/cf-hello-worlds
      branch: main
      commit_verification_keys: ((cloud-gov-pgp-keys))

  - name: timer
    type: time
    source:
      interval: 24h

  - name: deploy-python-flask-staging
    type: cf
    source: &cf-source-staging
      api: ((staging-cf-api-url))
      username: ((cf-username-staging))
      password: ((cf-password-staging))
      organization: ((cf-organization-staging))
      space: ((cf-space-staging))

  - name: deploy-ruby-sinatra-staging
    type: cf
    source: *cf-source-staging

  - name: deploy-nodejs-staging
    type: cf
    source: *cf-source-staging

  - name: deploy-nodejs-cnb-staging
    type: cf
    source: *cf-source-staging

  - name: deploy-php-staging
    type: cf
    source: *cf-source-staging

  - name: deploy-java-staging
    type: cf
    source: *cf-source-staging

  - name: deploy-dotnet-core-staging
    type: cf
    source: *cf-source-staging

  - name: deploy-python-flask-production
    type: cf
    source: &cf-source-production
      api: ((prod-cf-api-url))
      username: ((cf-username-production))
      password: ((cf-password-production))
      organization: ((cf-organization-production))
      space: ((cf-space-production))

  - name: deploy-ruby-sinatra-production
    type: cf
    source: *cf-source-production

  - name: deploy-nodejs-production
    type: cf
    source: *cf-source-production

  - name: deploy-nodejs-cnb-production
    type: cf
    source: *cf-source-production

  - name: deploy-php-production
    type: cf
    source: *cf-source-production

  - name: deploy-java-production
    type: cf
    source: *cf-source-production

  - name: deploy-dotnet-core-production
    type: cf
    source: *cf-source-production

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

resource_types:
  - name: slack-notification
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: slack-notification-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: git
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: git-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: cf
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: cf-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: time
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: time-resource
      aws_region: us-gov-west-1
      tag: latest
